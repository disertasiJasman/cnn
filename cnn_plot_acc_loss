# Use scikit-learn to grid search the batch size and epochs
import numpy
from sklearn.model_selection import GridSearchCV
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
import keras
from keras.optimizers import SGD, Adagrad, Adadelta, RMSprop, Adam
from sklearn.model_selection import train_test_split
from util.plot_fig import *

# Function to create model, required for KerasClassifier
def create_model():
    # create model
    model = Sequential()
    model.add(Dense(12, input_dim=8, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    # Compile model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

def main():
    # fix random seed for reproducibility
    seed = 7
    numpy.random.seed(seed)

    # load dataset
    dataset = numpy.loadtxt("pima-indians-diabetes.data.csv", delimiter=",")
    # split into input (X) and output (Y) variables
    X = dataset[:,0:8]
    Y = dataset[:,8]

    print(X.shape)
    print(round(len(X)*0.6))
    print(Y.shape)
    print(len(Y))


    data_train = dataset[0:round(len(X)*0.6),0:8]
    train_labels = dataset[0:round(len(X)*0.6),8]

    data_valid = dataset[round(len(X)*0.6):round(len(X)*0.8),0:8]
    valid_labels = dataset[round(len(X)*0.6):round(len(X)*0.8),8]

    data_test = dataset[round(len(X) * 0.8):round(len(X)), 0:8]
    test_labels = dataset[round(len(X) * 0.8):round(len(X)), 8]

    print(data_train.shape)
    print(data_valid.shape)
    print(data_test.shape)
    # create training and testing vars
    #X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.2)

    epochs = 200
    batch_size = 64
    model = create_model()
    model.compile(loss='binary_crossentropy',
                   optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0),
                   metrics=['accuracy'])

    history = model.fit(data_train, train_labels,
                          validation_data=(data_valid, valid_labels),
                          epochs=epochs,
                          batch_size=batch_size,
                          verbose=2)

    plot_history_by_dir_name(history, dir_name="img2", file_name="vgg16")
    test_loss, test_acc = model.evaluate(data_test, test_labels)
    print(test_acc)
    print(test_loss)

if __name__ == "__main__":
    main()
